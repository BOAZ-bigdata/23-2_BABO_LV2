### 문제풀이 핵심아이디어 또는 새롭게 알게된 내용: 
    

    # 어려워서 책의 풀이를 참고하였습니다.
    # 초기에 빈 모든 공간 중 3개를 골라 벽을 설치하고,
    # 벽을 설치할 떄마다 바이러스가 퍼지는 것을 DFS/BFS로 계산하여 안전 영역을 구한다.

    
    
### 코드의 시간복잡도와 그 이유:
    


### 코드:
```python

  
n,m = map(int, input(), split())
data = []
temp = [[0] * m for _ in range(n)]

for _ in range(n):
    data.append(list(map(int, input.split())))

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

result = 0

def virus(x, y):
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]

        if nx >= 0 and nx < n and ny >= 0 and ny < m:
            if temp[nx][ny] == 0:
                temp[nx][ny] = 2
                virus(nx, ny)

def get_score():
    score = 0
    for i in range(n):
        for j in range(m):
            if temp[i][j] == 0:
                score +=1
    return score

def dfs(count):

    if count == 3:
        for i in range(n):
            for j in range(m):
                temp[i][j] == data[i][j]

        for i in range(n):
            for j in range(m):
                if temp[i][j] == 2:
                    virus(i, j)

        result = max(result, get_score())
        return

    for i in range(n):
        for j in range(m):
            if data[i][j] == 0:
                data[i][j] = 1
                count += 1
                dfs(count)
                data[i][j] = 0
                count -= 1

dfs(0)
print(result)



```
